This document explains how to "detokenize" a C64 BASIC program.

While C64 BASIC is specifically addressed, other CBM BASICs differ in small
details, such as the default BASIC RAM address and the specific commands 
(tokens) supported.


Notes:
    The 6510 is a little-endian CPU, which means that words 
    (16-bit / 2-byte values) will typically appear low byte first.
    
Definitions:
    Host - The "host computer" running a C64 emulator.
    
    

File Format
===========

Overview
--------

A BASIC file is like any other PRG file, a load address followed by the exact
bytes that were in memory at that address.

[lo,hi] Load Address of this file, normally 2049.
(...) BASIC program lines, each terminated with a 0.
[0,0] Two zeros, signalling the end of the program
(...) Possible extra non-BASIC bytes contained in this program.


Load Address
------------
The first word of the file is the "load address" (lo/hi).

For normal C64 BASIC programs, this will be $01,$80 = 2049, which is the 
default start of BASIC program RAM. The SAVE command will always save this 
address. A normal LOAD command will always load to this address, regardless
of the actual value stored here.

A non-standard load address can mean one of several things:
* That the BASIC program was saved on a different CBM machine, which uses
  a different load address.

* The file is not a BASIC program, but a machine language program or
  other data.
  
* The file is a specially-crafted assembly/BASIC hybrid, typically done to
  implement auto-loading files.
  

BASIC Program Lines
-------------------
[lo, hi]    Pointer to next BASIC line in memory, or $0000 to signal
            the end of the program.
[lo, hi]    The line number for this program line.
(...)       A single line, containing BASIC tokens and ASCII characters.
[0]         A single zero byte, signalling the end of the line.

A basic program line begins with a word pointer to the next line in memory.
These pointers are in the in-memory representation of a BASIC program, and 
SAVE'ing writes them out to disk as-is.

If the link pointer is $0000, two zero bytes, then we've reached the end of
the program and stop parsing.

The individual bytes in a program line are either BASIC tokens or ASCII characters.
BASIC tokens always have the high bit set, so will always be >= $80.

If an ASCII quote is found, then "quote mode" is entered and all subsequent bytes
are interpreted as ASCII characters (including CBM control characters) until a
terminating quote is found.

A single zero byte terminates this line.

The end of a BASIC program will have three zero bytes in a row, one to
terminate the final line, and then two more as the next link pointer.


A single program line must be less than 256 bytes long or it will not 
load correctly. The CBM editor only allows you to enter lines up to 80 
characters (two screen lines) long. You can enter a longer line manually
if you use the command abbreviations, but those lines cannot be easily
re-edited later.

There also exist "cruncher" programs that can take a BASIC program and 
"crunch" it down to the most bytes per line possible without changing
the logic flow. (Since CBM Basic 2 is pretty, well, basic, that means simply
paying attention to GOTO/GOSUB targets.)
